package com.example.compiler;

import com.example.annotations.JSMethod;
import com.example.annotations.JSModule;
import com.google.auto.common.SuperficialValidation;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;

@AutoService(Processor.class)
public class JavaProcessor extends AbstractProcessor {

    private static final String FILE_DOC = "DO NOT EDIT THIS FILE!!! IT WAS USEDER BY TOONGINE API.";
    private static final String PACKAGE_NAME = "com.example.android.javaprocessor.util";
    private static final String PREFIX = "Mirror_";
    private static final String BASECLASS_PACKAGE_NAME = "com.example.android.javaprocessor.base";

    private static final ClassName PARAMS_WRAPPER = ClassName.get(PACKAGE_NAME, "ParamsWrapper");
    private static final ClassName MODULE_DELEGATER = ClassName.get(PACKAGE_NAME, "ModuleDelegater");
    private static final ClassName TNModule = ClassName.get(BASECLASS_PACKAGE_NAME, "TNModule");

    private Elements elementUtils;
    private Filer filer;


    /**
     * 会被注解处理工具调用
     *
     * @param env 提供了很多有用的工具类
     */
    @Override
    public synchronized void init(ProcessingEnvironment env) {
        super.init(env);
        elementUtils = env.getElementUtils();
        filer = env.getFiler();
    }

    /**
     * 指定使用java版本
     *
     * @return 默认返回的是6
     */
    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    /**
     * 这里必须指定，这个注解处理器是注册给哪个注解的。
     *
     * @return 它的返回值是一个字符串的集合，包含本处理器想要处理的注解类型的合法全称，即注解器所支持的注解类型集合，如果没有这样的类型，则返回一个空集合
     */
    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> types = new LinkedHashSet<>();
        for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {
            types.add(annotation.getCanonicalName());
        }
        return types;
    }

    /**
     * 添加需要解析的注解
     */
    private Set<Class<? extends Annotation>> getSupportedAnnotations() {
        Set<Class<? extends Annotation>> annotations = new LinkedHashSet<>();
        annotations.add(JSModule.class);
        return annotations;
    }


    /**
     * 相当于每个处理器的主函数main()，你在这里写你的扫描、评估和处理注解的代码，以及生成Java文件。
     *
     * @param set              请求处理的注解类型
     * @param roundEnvironment 信息环境
     * @return
     */
    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        List<JavaFile> files = findAndParseTargets(roundEnvironment);
        for (JavaFile javaFile : files) {
            try {
                javaFile.writeTo(filer);
            } catch (IOException e) {
                error("Unable to write same name %s: %s", javaFile.packageName, e.getMessage());
            }
        }
        return false;
    }

    private void error(String message, Object... args) {
        printMessage(Diagnostic.Kind.ERROR, message, args);
    }

    private void printMessage(Diagnostic.Kind kind, String message, Object[] args) {
        if (args.length > 0) {
            message = String.format(message, args);
        }
        processingEnv.getMessager().printMessage(kind, message);
    }

    private List<JavaFile> findAndParseTargets(RoundEnvironment env) {
        List<JavaFile> javaFiles = new ArrayList<>();
        // Process each @JSModule element.
        for (Element e : env.getElementsAnnotatedWith(JSModule.class)) {
            if (!SuperficialValidation.validateElement(e))
                continue;
            List<? extends Element> allEle = e.getEnclosedElements();
            parseJSModule(e, allEle, javaFiles);
        }
        return javaFiles;
    }

    private void parseJSModule(Element moduleEle, List<? extends Element> allEle, List<JavaFile> javaFiles) {
        JSModule moduleAnno = moduleEle.getAnnotation(JSModule.class);
        String moduleName = moduleAnno.name();
        if (ARUtils.isEmpty(moduleName))
            return;

        // constructor build
        MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder();
        constructorBuilder.addModifiers(Modifier.PUBLIC).addException(Exception.class);

        // constructor body
        ClassName original = ClassName.get(elementUtils.getPackageOf(moduleEle).toString(),
                moduleEle.getSimpleName().toString());
        constructorBuilder.addStatement("this.original = $T.class.newInstance()", original)
                .addStatement("this.mapping = new $T()", HashMap.class);

        // parse JSMothod
        int size = allEle.size();
        for (int i = 0; i < size; i++) {
            Element elm = allEle.get(i);
            JSMethod pathAnno = elm.getAnnotation(JSMethod.class);
            if (pathAnno == null)
                continue;

            // String agrs = ((ExecutableElement) elm).getParameters().toString();
            String types = "";
            String methodFullTypes = elm.toString();
            int start = methodFullTypes.indexOf("(");
            int end = methodFullTypes.indexOf(")");
            if (end - start > 1) {
                // open1(java.lang.String,com.tangxiaolv.router.Promise) =>
                // ,java.lang.String.class,com.tangxiaolv.router.Promise.class))
                types = methodFullTypes.substring(start + 1, end);
                if (types.lastIndexOf("...") != -1)
                    types = types.replace("...", "[]");
                methodFullTypes = "," + ARUtils.getFullTypesString(types) + "))";
            } else {
                methodFullTypes = "))";
            }

            String methodKey = pathAnno.alias();
            String methodName = elm.getSimpleName().toString();
            // add method
            constructorBuilder.addStatement(
                    "mapping.put($S + $T._METHOD, original.getClass().getMethod($S" + methodFullTypes,
                    methodKey,
                    MODULE_DELEGATER,
                    methodName);
        }

        // method build
        MethodSpec.Builder invokeBuilder = MethodSpec.methodBuilder("invoke");
        invokeBuilder.addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .returns(void.class)
                .addParameter(String.class, "aimMethod")
                .addParameter(PARAMS_WRAPPER, "params")
                .addException(Exception.class);

        // method body
        invokeBuilder.addStatement("$T.invoke(aimMethod,mapping,original,params)", MODULE_DELEGATER);

        // java file build
        String mirror_name_main = PREFIX + moduleName;
        TypeSpec clazz = TypeSpec.classBuilder(mirror_name_main)
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .superclass(TNModule)
                //.addSuperinterface(IMIRROR)
                // Fields
                .addFields(buildJSModuleFields())
                // constructor
                .addMethod(constructorBuilder.build())
                // Methods
                .addMethod(invokeBuilder.build())
                // doc
                .addJavadoc(FILE_DOC)
                .build();

        JavaFile javaFile = JavaFile.builder(PACKAGE_NAME, clazz).build();
        javaFiles.add(javaFile);
    }

    // build fields
    private Iterable<FieldSpec> buildJSModuleFields() {
        ArrayList<FieldSpec> fieldSpecs = new ArrayList<>();
        FieldSpec f_mapping = FieldSpec.builder(HashMap.class, "mapping")
                .addModifiers(Modifier.PRIVATE, Modifier.FINAL)
                .build();
        fieldSpecs.add(f_mapping);

        FieldSpec f_original = FieldSpec.builder(Object.class, "original")
                .addModifiers(Modifier.PRIVATE, Modifier.FINAL)
                .build();
        fieldSpecs.add(f_original);

        return fieldSpecs;
    }


}
